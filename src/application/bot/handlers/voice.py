import structlog
from aiogram import Dispatcher, F
from aiogram.types import Message
from aiogram_dialog import DialogManager, StartMode

from src.application.bot.dialogs.transcription import TranscriptionDialog
from src.domains.audio.services import AudioService


logger = structlog.get_logger()


async def handle_voice(
    message: Message, 
    dialog_manager: DialogManager, 
):
    """Handle voice messages."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    file_id = message.voice.file_id
    file_name = f"voice_{file_id}.ogg"
    file_size = message.voice.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if file_size > 200 * 1024 * 1024:  # 200 MB
        await message.answer(
            "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 200 MB."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await message.answer(
        f"üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"üìä –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.2f} MB\n\n"
        "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
    )

    user_id = message.from_user.id
    dialog_manager.dialog_data.update({
        "file_id": file_id,
        "file_name": file_name,
        "user_id": user_id,
        "status": "processing",
        "progress": 0,
    })
    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    await dialog_manager.start(
        TranscriptionDialog.result,
        data={"file_id": file_id, "file_name": file_name, "user_id": user_id},
        mode=StartMode.RESET_STACK
    )


def register_voice_handlers(dp: Dispatcher):
    """Register voice handlers."""
    dp.message.register(handle_voice, F.voice)