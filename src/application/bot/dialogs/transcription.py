import asyncio

from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.text import Const, Format

from src.domains.audio.services import AudioService
from src.domains.transcription.services import TranscriptionService
from src.domains.diarization.services import DiarizationService


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class TranscriptionDialog(StatesGroup):
    transcription = State()
    processing = State()
    result = State()
    export = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start_transcription(start_data, result, dialog_manager: DialogManager):
    """Start transcription process."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    file_id = dialog_manager.start_data.get("file_id")
    file_name = dialog_manager.start_data.get("file_name")
    user_id = dialog_manager.start_data.get("user_id")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞
    dialog_manager.dialog_data.update({
        "file_id": file_id,
        "file_name": file_name,
        "user_id": user_id,
        "status": "processing",
        "progress": 0,
    })
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∫–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await dialog_manager.switch_to(TranscriptionDialog.processing)


async def get_processing_data(dialog_manager: DialogManager, **kwargs):
    """Get processing data for the dialog."""
    return {
        "file_name": dialog_manager.dialog_data.get("file_name"),
        "status": dialog_manager.dialog_data.get("status"),
        "progress": dialog_manager.dialog_data.get("progress", 0),
    }


async def process_file(
    dialog_manager: DialogManager,
    audio_service: AudioService,
    transcription_service: TranscriptionService,
    diarization_service: DiarizationService,
    **kwargs
):
    """Process the file in background."""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    # –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    for progress in range(0, 101, 10):
        dialog_manager.dialog_data["progress"] = progress
        await dialog_manager.update({"progress": progress})
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    dialog_manager.dialog_data["status"] = "completed"
    await dialog_manager.switch_to(TranscriptionDialog.result)


async def get_result_data(dialog_manager: DialogManager, **kwargs):
    """Get result data for the dialog."""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return {
        "file_name": dialog_manager.dialog_data.get("file_name"),
        "transcription_id": "sample-id",  # –ó–∞–≥–ª—É—à–∫–∞
        "duration": 120,  # –ó–∞–≥–ª—É—à–∫–∞, —Å–µ–∫—É–Ω–¥—ã
        "language": "ru",  # –ó–∞–≥–ª—É—à–∫–∞
        "speakers": 2,  # –ó–∞–≥–ª—É—à–∫–∞
    }


async def on_export_click(
    callback: CallbackQuery, 
    button: Button, 
    dialog_manager: DialogManager,
):
    """Handle export button click."""
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∫–Ω—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    await dialog_manager.switch_to(TranscriptionDialog.export)


# –û–∫–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
processing_window = Window(
    Const("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ"),
    Format("–§–∞–π–ª: {file_name}"),
    Format("–°—Ç–∞—Ç—É—Å: {status}"),
    Format("–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"),
    state=TranscriptionDialog.processing,
    getter=get_processing_data
)

result_window = Window(
    Const("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
    Format("–§–∞–π–ª: {file_name}"),
    Format("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫."),
    Format("–Ø–∑—ã–∫: {language}"),
    Format("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {speakers}"),
    Button(
        Const("üì§ –≠–∫—Å–ø–æ—Ä—Ç"),
        id="export",
        on_click=on_export_click
    ),
    Button(
        Const("üîÑ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"),
        id="new",
        on_click=lambda c, b, m: m.done()
    ),
    state=TranscriptionDialog.result,
    getter=get_result_data
)

export_window = Window(
    Const("üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞"),
    Button(
        Const("üìù DOCX"),
        id="docx",
        on_click=lambda c, b, m: None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
    ),
    Button(
        Const("üé¨ SRT"),
        id="srt",
        on_click=lambda c, b, m: None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
    ),
    Button(
        Const("üî¢ JSON"),
        id="json",
        on_click=lambda c, b, m: None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
    ),
    Button(
        Const("üìÑ TXT"),
        id="txt",
        on_click=lambda c, b, m: None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
    ),
    Button(
        Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
        id="back",
        on_click=lambda c, b, m: m.switch_to(TranscriptionDialog.result)
    ),
    state=TranscriptionDialog.export
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
transcription_dialog = Dialog(
    Window(
        Const("üéµ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ"),
        Const("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞..."),
        state=TranscriptionDialog.transcription,
        on_process_result=start_transcription
    ),
    processing_window,
    result_window,
    export_window
)