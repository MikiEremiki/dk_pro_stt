from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Button, Select, Back
from aiogram_dialog.widgets.text import Const, Format

from src.domains.user.entities import UserSettings
from src.domains.user.repositories import UserSettingsRepository
from src.domains.export.entities import ExportFormat
from src.domains.transcription.entities import TranscriptionModel
from src.domains.user.services import UserSettingsService


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class SettingsDialog(StatesGroup):
    settings = State()
    model = State()
    export = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def get_settings_data(dialog_manager: DialogManager, **kwargs):
    """Get user settings data."""
    user_id = dialog_manager.event.from_user.id
    user_service = UserSettingsService(UserSettingsRepository())
    settings = UserSettings(user_id)
    print(settings)
    return {
        "preferred_model": settings.preferred_model,
        "preferred_export_format": settings.preferred_export_format,
        "auto_detect_language": '–í–∫–ª' if settings.auto_detect_language else '–í—ã–∫–ª',
        "auto_delete_files": '–í–∫–ª' if settings.auto_delete_files else '–í—ã–∫–ª',
    }


async def on_model_selected(
    callback: CallbackQuery, 
    widget: Select, 
    dialog_manager: DialogManager, 
    item_id: str,
):
    """Handle model selection."""
    user_id = callback.from_user.id
    # user_service = UserSettingsService()
    # await user_service.update_user_settings(
    #     user_id, preferred_model=TranscriptionModel(item_id))
    await callback.answer(f"–ú–æ–¥–µ–ª—å {item_id} –≤—ã–±—Ä–∞–Ω–∞")
    await dialog_manager.update({"preferred_model": item_id})


async def on_export_selected(
    callback: CallbackQuery, 
    widget: Select, 
    dialog_manager: DialogManager, 
    item_id: str,
):
    """Handle export format selection."""
    user_id = callback.from_user.id
    # user_service = UserSettingsService()
    # await user_service.update_user_settings(
    #     user_id, preferred_export_format=ExportFormat(item_id))
    await callback.answer(f"–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ {item_id} –≤—ã–±—Ä–∞–Ω")
    await dialog_manager.update({"preferred_export_format": item_id})


async def toggle_auto_detect(
    callback: CallbackQuery, 
    button: Button, 
    dialog_manager: DialogManager,
):
    """Toggle auto detect language setting."""
    user_id = callback.from_user.id
    current = dialog_manager.dialog_data.get("auto_detect_language", True)
    # user_service = UserSettingsService()
    new_value = not current
    # await user_service.update_user_settings(user_id, auto_detect_language=new_value)
    await dialog_manager.update({"auto_detect_language": new_value})


async def toggle_auto_delete(
    callback: CallbackQuery, 
    button: Button, 
    dialog_manager: DialogManager,
):
    """Toggle auto delete files setting."""
    user_id = callback.from_user.id
    current = dialog_manager.dialog_data.get("auto_delete_files", True)
    # user_service = UserSettingsService()
    new_value = not current
    # await user_service.update_user_settings(user_id, auto_delete_files=new_value)
    await dialog_manager.update({"auto_delete_files": new_value})


# –û–∫–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
settings_window = Window(
    Const("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    Const("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞."),
    Button(
        Format("üîÑ –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {preferred_model}"),
        id="model",
        on_click=lambda c, b, m: m.switch_to(SettingsDialog.model)
    ),
    Button(
        Format("üì§ –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: {preferred_export_format}"),
        id="export",
        on_click=lambda c, b, m: m.switch_to(SettingsDialog.export)
    ),
    Button(
        Format("üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞: {auto_detect_language}"),
        id="auto_detect",
        on_click=toggle_auto_detect
    ),
    Button(
        Format("üóë –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: {auto_delete_files}"),
        id="auto_delete",
        on_click=toggle_auto_delete
    ),
    Button(
        Const("‚úÖ –ì–æ—Ç–æ–≤–æ"),
        id="done",
        on_click=lambda c, b, m: m.done()
    ),
    state=SettingsDialog.settings,
    getter=get_settings_data
)

model_window = Window(
    Const("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"),
    Const("–û—Ç –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–∏—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."),
    Select(
        Format("‚úì {item}") if Format("{item}") == Format("{preferred_model}") else Format("{item}"),
        id="model_select",
        items=["whisper-large-v3", "whisper-turbo"],
        item_id_getter=lambda x: x,
        on_click=on_model_selected
    ),
    Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
    state=SettingsDialog.model,
    getter=get_settings_data
)

export_window = Window(
    Const("üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"),
    Select(
        Format("‚úì {item}") if Format("{item}") == Format("{preferred_export_format}") else Format("{item}"),
        id="export_select",
        items=["docx", "srt", "json", "txt"],
        item_id_getter=lambda x: x,
        on_click=on_export_selected
    ),
    Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
    state=SettingsDialog.export,
    getter=get_settings_data
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
settings_dialog = Dialog(settings_window, model_window, export_window)